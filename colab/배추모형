{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyNjaNAr+BaAEP+MU1Pvsbud"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Cabbage_PBM 2023\n","\n","#### Git\n","* https://github.com/EthanSeok/Cabbage_PBM\n","\n","#### Directory\n","* excel: excel을 이용하여 파라미터 관계 구현\n","* ipynb: Jupyter Notebook을 이용하여 각 함수 분리\n","* model: python cabbage model\n","\n","#### 배추 모형 소개\n","* https://docs.google.com/presentation/d/1mzTl4Q0dJcN_K1I_d30VK1Oqns8d3dC_/edit\n","\n","\n","#### 강의영상\n","* https://youtube.com/playlist?list=PLqlg2QVJKrc244GkJrCjb0CoslLTns841\n","\n","\n","#### 모델 분석 - 진행중\n","* https://docs.google.com/presentation/d/1VcwzRiALw2dmEhqGf25OCyT3Atbh8yvgGs2oLIkWt4A/edit\n","\n","\n","#### 레퍼런스\n","* https://drive.google.com/drive/u/0/folders/1mekGsuVuFpZEJHBl8deoruriqCcAf1kO\n"],"metadata":{"id":"oxDaFQphMU8k"}},{"cell_type":"markdown","source":["#### 사용 설명\n","\n","* **본 파일은 모델의 파라미터 확인용으로 제작되었습니다. 파이선 모델 실행후 출력 파일을 적용해야합니다.**\n"],"metadata":{"id":"6dm2VnalV8Pl"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d1h5r_bCKVLd","executionInfo":{"status":"ok","timestamp":1673415011417,"user_tz":-540,"elapsed":2929,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}},"outputId":"d33e6c26-5cf3-42d4-b3ca-3f83ec579268"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":10,"metadata":{"id":"iuJzzmuiJhjE","executionInfo":{"status":"ok","timestamp":1673415011417,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","%matplotlib inline"]},{"cell_type":"code","source":["# 경로 입력\n","hour_result = pd.read_csv('/content/drive/MyDrive/Ethan/연구실 자료/작업/모델링/배추모형/배추모형_colab/check_hour.csv') # check_hour.csv 경로 복사\n","input_data = pd.read_csv('/content/drive/MyDrive/Ethan/연구실 자료/작업/모델링/배추모형/배추모형_colab/ricca17.csv') # inputcsv 파일 경로 복사\n","gasex_param = pd.read_csv('/content/drive/MyDrive/Ethan/연구실 자료/작업/모델링/배추모형/배추모형_colab/gasexchange/gasex_param.csv') # gasexchange/gasex_param.csv 경로 복사\n","growth_param = pd.read_csv('/content/drive/MyDrive/Ethan/연구실 자료/작업/모델링/배추모형/배추모형_colab/growth/growth_param.csv') # growth/growth_param.csv 경로 복사"],"metadata":{"id":"9FceFPM_Kvao","executionInfo":{"status":"ok","timestamp":1673415011417,"user_tz":-540,"elapsed":9,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["### **gasexchange.py**"],"metadata":{"id":"0E76YSSlMPj9"}},{"cell_type":"markdown","source":["#### parameter"],"metadata":{"id":"sYpCvss-M9k_"}},{"cell_type":"code","source":["##### Constants\n","KELVIN   = 273.15       # Kelvin temperature\n","R        = 8.314        # ideal gas constant\n","SBC      = 5.6697e-8    # Stefan-Boltzmann constant   W m-2 K-4\n","PSC      = 6.66e-4      # psychrometer constant\n","Cp       = 29.3         # specific heat of air    J mol-1 C-1\n","LAMBDA   = 44000.       # Latent heat of vaporization at 25 C J mol-1\n","##### Parameters for light\n","scatt   = 0.15          # leaf reflectance + transmittance\n","f       = 0.15          # correction factor\n","conv    = 4.57          # conversion from W m-2 to umol m-2 s-1\n","epsilon = 0.97          # leaf thermal emissivity\n","##### Other Common parameters\n","O2    = 210.            # O2 partial pressure (mbar=20.5kPa)\n","Kc25  = 404.9           # MM constant of Rubisco for CO2 at 25 from Bernacchi et al. (2001)\n","Ko25  = 278.4           # MM constant of Rubisco for O2 at 25 from Bernacchi et al. (2001)\n","Eac   = 79430.  # Activation energy for Kc from Bernacchi et al. (2001)\n","Eao   = 36380.  # Activation energy for Ko from Bernacchi et al. (2001)\n","g0    = 0.036    # residual stomatal conductance,  mol m-2 s-1\n","g1    = 10.0    # empirical coefficient of BWB model  이거\n","P     = 1.013   # conversion factor from ppmv to ubar (= 1013000 / 1000000) = 101.3 kPa = 1013 mbar\n","\n","## parameter for water stress\n","s_f    = 0.5     # sensitivity\n","psi_f  = -1.0\n","psi_th = -0.8    # threshold wp below which stress effect shows up\n","\n","##########################################################\n","##### Parameters for Chinese cabbage from Experiment 2015\n","##########################################################\n","theta   = 0.7       # hyperbola parameter 이거\n","width   = 0.1        # leaf width (m) 이거\n","Vcm25   = 152.5     # Vcmax of CC at 25 C 이거\n","Jm25    = 238.6      # Jmax  of CC at 25 C 이거\n","TPU25   = 17.1       # 이거\n","Rd25    = 1.7        # 이거\n","gamma25 = 42.8        #\n","Havcm   = 65330     # Ha\n","#Hdvcm   = 149252.    # Hd\n","#Svvcm   = 486.       # Sv\n","Hajm    = 57500     # Ha\n","Hdjm    = 439800.    # Hd\n","Svjm    = 1400      # Sv\n","Ear     = 46390.     # Ha\n","Eagamma = 37830.     # Ha\n","EaTPU   = 47100.     # Ha for TPU   from Kim and Leith(2003)"],"metadata":{"id":"EnZquMw7Mssd","executionInfo":{"status":"ok","timestamp":1673415011418,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["PPFD = input_data['Irrad'].tolist()\n","PPFD = [x * 4.57 / 2 for x in PPFD]\n","Ta = input_data['Tair'].tolist()\n","RH = input_data['RH'].tolist()\n","wind = input_data['wind'].tolist()\n","\n","Ca = 400 * 1.013\n","predawn = 0\n","\n","An = gasex_param['An'].tolist()\n","Tlnew = gasex_param['newtleaf'].tolist()\n","\n","Ic = PPFD\n","Tleaf = Tlnew"],"metadata":{"id":"NV_lTaPVM9Fl","executionInfo":{"status":"ok","timestamp":1673415011418,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["#### Stomatal Conductance model (BWB model)"],"metadata":{"id":"0JE1coJsNE5U"}},{"cell_type":"markdown","source":["gbw"],"metadata":{"id":"IgKRLwxJNcWz"}},{"cell_type":"code","source":["gbw = []\n","\n","for i in range(len(wind)):\n","    gbw.append(0.147 * np.sqrt(max(0.4,wind[i])/(0.72 * width)))"],"metadata":{"id":"8Bgpwq_WNEd9","executionInfo":{"status":"ok","timestamp":1673415011418,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["gbc"],"metadata":{"id":"YmI3UYaKNjJs"}},{"cell_type":"code","source":["gbc = []\n","\n","for i in range(len(gbw)):\n","    gbc.append(gbw[i]/1.37)"],"metadata":{"id":"IU5CfaB-NlB9","executionInfo":{"status":"ok","timestamp":1673415011418,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["LWPeffect (water stress)"],"metadata":{"id":"LtsWsAsZNpTD"}},{"cell_type":"code","source":["stress = min(1.0, (1+np.exp(psi_f*s_f)) / (1+np.exp(s_f*(psi_f-(predawn-psi_th)))))"],"metadata":{"id":"zlGThrwlNuHO","executionInfo":{"status":"ok","timestamp":1673415011419,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["gsc"],"metadata":{"id":"fUIr3GU5NxP2"}},{"cell_type":"code","source":["gsc = []\n","\n","Ha = []\n","Cs = []\n","ah = []\n","bh = []\n","ch = []\n","hs = []\n","es_Tleaf = []\n","Ds = []\n","\n","# print(Ca)\n","for i in range(len(An)):\n","    Ha.append(RH[i]/100)\n","    Cs.append(Ca - An[i]/ gbc[i] * 1.013)\n","    if Cs == 0: Cs[i] = 0.001\n","    if An[i] <= 0: An[i] = 0.1\n","    ah.append((stress*g1 * An[i]) / Cs[i] )\n","    bh.append(g0 + gbc[i] - (stress*g1 * An[i] / Cs[i]))\n","    ch.append((-Ha[i] * gbc[i]) - g0)\n","    hs.append(min(max((-bh[i] + np.sqrt(bh[i]*bh[i] - 4*ah[i]*ch[i])/(2*ah[i])), 0.1), 1.0))\n","    gsc.append(min(g0 + stress*g1 * An[i] * hs[i] / Cs[i], 1.5))\n","    es_Tleaf.append(0.611 * np.exp(17.27 * Tleaf[i] /(Tleaf[i] + 237.3)))\n","\n","    Ds = (1 - hs[i])*es_Tleaf[i]"],"metadata":{"id":"IZjvkSAyNyWY","executionInfo":{"status":"ok","timestamp":1673415011419,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["#### Energy balance model"],"metadata":{"id":"mqrKO4FyN-mf"}},{"cell_type":"markdown","source":["EnergyBal"],"metadata":{"id":"wnYxkpEjOL3x"}},{"cell_type":"code","source":["st = 1\n","gsw = []\n","gh = []\n","gv = []\n","gr = []\n","ghr = []\n","thermal_air = []\n","es_Ta = []\n","D = []\n","Ea = []\n","Icabs = []\n","NIR = []\n","Rabs = []\n","slope = []\n","Tlnew = []\n","es_Tlnew = []\n","E = []\n","Emm = []\n","Tlnew_eb = []\n","\n","for i in range(len(Ta)):\n","    gsw.append(gsc[i] * 1.6) # co2 - > h2o\n","    gh.append(gbw[i] * 0.135 / 0.147)\n","    gv.append(gsw[i] * gbw[i] / (gsw[i] + gbw[i]))\n","    gr.append(4 * epsilon * SBC * (Tleaf[i] + KELVIN) ** 3 / Cp)\n","    ghr.append(gh[i] + gr[i])\n","    thermal_air.append(epsilon * SBC * (Ta[i] + KELVIN) ** 4)\n","    es_Ta.append(0.611 * np.exp(17.27 * Ta[i] / (Ta[i] + 237.3)))  # kPa\n","    RH[i] = min(100, max(RH[i], 10.0))\n","    D.append((1 - RH[i] / 100) * es_Ta[i])  # Vapor pressure deficit\n","    Ea.append(RH[i] / 100 * es_Ta[i])  # Ambient vapor pressure\n","    Icabs.append(Ic[i] / conv * (1 - scatt))\n","    NIR.append(Ic[i] / 2.)  # NIR = solRad - PAR\n","    Rabs.append(Icabs[i] + 0.15 * NIR[i] + 2 * (epsilon * SBC * (Ta[i] + KELVIN) ** 4))\n","    slope.append((4098 * 0.6198 * np.exp(17.269 * Ta[i] / (Ta[i] + 237.3))) / (Ta[i] + 237.3) ** 2)\n","    Tlnew_eb.append(Ta[i] + ((Rabs[i] - thermal_air[i] - LAMBDA * gv[i] * D[i] / P) / (ghr[i] * Cp + LAMBDA * gv[i] * slope[i] / P)))\n","    es_Tlnew.append(0.611 * np.exp(17.27 * Tlnew_eb[i] / (Tlnew_eb[i] + 237.3))) # kPa\n","    E.append(max(0.0, 2 * gv[i] * (es_Tlnew[i] - Ea[i]) / 101.3))  # mol m-2 leaf s-1 (H2O), both sides of a leaf(*2)\n","    Emm.append(E[i] * 3600 * 18 * 10 ** (-3))  # mm m-2 leaf hr-1 (H2O)"],"metadata":{"id":"nXaGCmCeOEOJ","executionInfo":{"status":"ok","timestamp":1673415011419,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["interCi"],"metadata":{"id":"ptHT-24EONPY"}},{"cell_type":"code","source":["An = gasex_param['An'].tolist()\n","\n","Cinew = []\n","for i in range(len(An)):\n","    Cinew.append(Ca - An[i] * (1 / gsc[i] + 1 / gbc[i]) * P)"],"metadata":{"id":"pjLZ-xJ8OKfz","executionInfo":{"status":"ok","timestamp":1673415011419,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["#### Photosynthesis model (FvCB model)"],"metadata":{"id":"mqcw7zDEObcU"}},{"cell_type":"markdown","source":["assim parameter"],"metadata":{"id":"RgZI5cC3Ol08"}},{"cell_type":"code","source":["Vcmax = []\n","Jmax = []\n","GammaStar = []\n","Kc = []\n","Ko = []\n","TPU = []\n","Rd = []\n","\n","def tempParam1(k25, Ha, Hd, Sv, temp):\n","    a = (1+np.exp((Sv*(25+KELVIN)-Hd)/(R*(25+KELVIN))))/(1+np.exp((Sv*(temp+KELVIN)- Hd)/(R*(temp+KELVIN))))\n","    b = np.exp((Ha / (R * (25.+KELVIN))) * (1 - (25.+KELVIN) / (temp + KELVIN)))\n","    return (k25 * b * a)\n","\n","def tempParam2(k25, Ha, temp):\n","    return  k25 * np.exp((Ha / (R * (25.+KELVIN)) * (1 - (25.+KELVIN) / (KELVIN + temp)))) # --> arrhenius function\n","\n","for i in range(len(Ta)):\n","    Vcmax.append(tempParam2(k25=Vcm25, Ha=Havcm, temp=Ta[i]))\n","    Jmax.append(tempParam1(k25=Jm25, Ha=Hajm, Hd=Hdjm, Sv=Svjm, temp=Ta[i]))\n","    GammaStar.append(tempParam2(k25=gamma25, Ha=Eagamma, temp=Ta[i]))\n","    Kc.append(tempParam2(k25=Kc25, Ha=Eac, temp=Ta[i]))\n","    Ko.append(tempParam2(k25=Ko25, Ha=Eao, temp=Ta[i]))\n","    TPU.append(tempParam2(k25=TPU25, Ha=EaTPU, temp=Ta[i]))\n","    Rd.append(tempParam2(k25=Rd25, Ha=Ear, temp=Ta[i]))"],"metadata":{"id":"iF3VmuveOlVD","executionInfo":{"status":"ok","timestamp":1673415011419,"user_tz":-540,"elapsed":9,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["leafassim - calculate assim"],"metadata":{"id":"4lSUQkXCOvT9"}},{"cell_type":"code","source":["def minh(A, B, theta=0.7):  # hyperbolic minimum\n","    x = (A + B) * (A + B) - 4 * A * B * theta\n","    if (x < 0):\n","        res = min(A, B)\n","    else:\n","        res = ((A + B) - np.sqrt(x)) / (2 * theta)\n","    return res\n","\n","J2 = []\n","J = []\n","for i in range(len(Jmax)):\n","    J2.append(Ic[i] * (1 - scatt) * (1 - f) / 2)\n","    J.append(((J2[i] + Jmax[i]) - np.sqrt((J2[i] + Jmax[i]) ** 2 - 4 * J2[i] * Jmax[i] * theta)) / (2 * theta))\n","\n","## 광합성 모델식\n","Wc = []\n","Wj = []\n","Ws = []\n","Wp = []\n","W = []\n","Rd = []\n","An_as = []\n","\n","for i in range(len(Vcmax)):\n","    Wc.append(Vcmax[i] * (Cinew[i] - GammaStar[i]) / (Cinew[i] + Kc[i] * (1 + O2 / Ko[i])))  # Rubisco-limited\n","    Wj.append(J[i] * (Cinew[i] - GammaStar[i]) / (4 * (Cinew[i] + 2 * GammaStar[i])))\n","    Ws.append(3 * TPU[i])\n","    Wp.append(minh(Wc[i], Wj[i], theta))\n","    W.append(min(Wp[i], Ws[i]))  # min(Wp, Ws)\n","    Rd.append(0.015 * Vcmax[i])  # Dark respiration from Collatz(1991)\n","    An_as.append(W[i] - Rd[i])"],"metadata":{"id":"z3QNogbTO0ne","executionInfo":{"status":"ok","timestamp":1673415011420,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["### **grwoth.py**"],"metadata":{"id":"NZxaU1rUO7ek"}},{"cell_type":"markdown","source":["#### parameter"],"metadata":{"id":"WBoNLKccPF1v"}},{"cell_type":"code","source":["### Parameters for Chinese cabbage\n","Tbase  = 0.0           # base temperature\n","dm     = 0.6           # max root depth\n","dg     = 0.012         # root elongation rate (m/day)\n","hgt    = 0.4           # mean plant height (m)\n","width  = 0.20          # mean leaf width (m)\n","laicr  = 3             # lai critical for leaf death\n","\n","### Constants for maintenace respiration at 25C for various plant parts\n","kgl  = 0.03            # for green leaves (gCH2O/gDM/day)\n","kr   = 0.015           # for root (gCH2O/gDM/day)\n","ko   = 0.020           # for rep. org\n","\n","### Glucose requirement for synthesis of various plant parts\n","ggl  = 1.463           # for green leaves (gCH2O/gDM)\n","gr   = 1.444           # for root (gCH2O/gDM)\n","go   = 1.463\n","\n","# ## Table for partitioning\n","istage = [0.00, 0.50, 0.95, 1.00, 1.10, 2.00]         # stage\n","ifgl   = [0.92, 0.93, 0.94, 0.70, 0.00, 0.00]         # green leaf ratio\n","ifr    = [0.08, 0.07, 0.05, 0.00, 0.00, 0.00]         # root ratio\n","ifo    = [0.00, 0.00, 0.01, 0.30, 1.00, 1.00]\n","\n","## ratio to DM / CH2O\n","cd     = 1.125         # factor convert mass to CH2O weight, = mass * 45%C / C_MW * CH2O_MW\n","\n","## ratio of fresh weight to dry weight of leaf\n","FDR    = 16.76\n","\n","## time conversion\n","time  = 'hour'\n","conv  = 1/24 if time == 'hour' else 1\n","\n","wgls = 1.0\n","wrs = 0.2\n","wos = 0.0\n","maints = 0.0\n","rootds = 0.0"],"metadata":{"id":"2Q0OIJE5Pk96","executionInfo":{"status":"ok","timestamp":1673415011420,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["assim = hour_result['assim'].tolist()\n","dvs = hour_result['dvs'].tolist()\n","Ta = input_data['Tair'].tolist()\n","\n","wgl = growth_param['wgl'].to_list()\n","wr = growth_param['wr'].to_list()\n","wo = growth_param['wo'].to_list()\n","maint = []"],"metadata":{"id":"cq3jSeWuPORK","executionInfo":{"status":"ok","timestamp":1673415011420,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["#### growCalc"],"metadata":{"id":"dsUvn8Y8QB3c"}},{"cell_type":"code","source":["corr = 1 / 24\n","RDT = 1.0\n","\n","assim_c = []\n","\n","for i in range(len(assim)):\n","    assimc = assim[i] * RDT\n","    assim_c.append(assimc)\n","\n","# assim_c\n","\n","ddage = []\n","\n","for i in range(len(dvs)):\n","    if (dvs[i] > 0.9 and dvs[i] < 1.9):\n","        ddages = (0.05 / (2.0 - dvs[i])) * conv\n","        ddage.append(ddages)\n","    elif dvs[i] >= 1.9:\n","        ddages = (0.05 / 0.1) * conv\n","        ddage.append(ddages)\n","    else:\n","        ddages = 0.0\n","        ddage.append(ddages)"],"metadata":{"id":"n3Pzm2ELPvJr","executionInfo":{"status":"ok","timestamp":1673415011420,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["mgl, mr, mo, RM"],"metadata":{"id":"x0kJ-YEuP6LT"}},{"cell_type":"code","source":["mgl = []\n","mr = []\n","mo = []\n","RM = []\n","\n","for i in range(len(wgl)):\n","    mgl.append(wgl[i] * kgl)\n","    mr.append(wr[i] * kr)\n","    mo.append(wo[i] * ko)\n","    RM.append(mgl[i] + mo[i])\n","\n","tempRM = []\n","RMpr = []\n","\n","for i in range(len(RM)):\n","    tempRM.append((RM[i] * 2 **((Ta[i] - 20)/10))*corr)  # temperature   from Teh\n","    RMpr.append(min(tempRM[i], assim_c[i]))"],"metadata":{"id":"X5-01TNoP1KA","executionInfo":{"status":"ok","timestamp":1673415011421,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["fgl, fr, fo"],"metadata":{"id":"VOIbq4pvQGiW"}},{"cell_type":"code","source":["fgl = []\n","fr = []\n","fo = []\n","\n","for i in range(len(dvs)):\n","    fgl.append(np.interp(dvs[i], istage, ifgl))\n","    fr.append(np.interp(dvs[i], istage, ifr))\n","    fo.append(np.interp(dvs[i], istage, ifo))"],"metadata":{"id":"lmH_MjL3QIMM","executionInfo":{"status":"ok","timestamp":1673415011421,"user_tz":-540,"elapsed":10,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":["fggl, fgr, fgo, GT"],"metadata":{"id":"ATsv3mSlQJmW"}},{"cell_type":"code","source":["fggl = []\n","fgr = []\n","fgo = []\n","GT = []\n","\n","for i in range(len(fgl)):\n","    fggl.append(fgl[i] * ggl)\n","    fgr.append(fr[i]  * gr)\n","    fgo.append(fo[i]  * go)\n","    GT.append(fggl[i] + fgr [i]+ fgo[i])\n","\n","available = []\n","\n","for i in range(len(RMpr)):\n","    avail = ((assim_c[i] - RMpr[i]) / GT[i])\n","    avail *= 0.84\n","    available.append(avail)"],"metadata":{"id":"MmWYlaVkQOoD","executionInfo":{"status":"ok","timestamp":1673415012068,"user_tz":-540,"elapsed":657,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["gr_gl,  gr_r,  gr_o,  gr_dl"],"metadata":{"id":"aRFNXMD5QTzA"}},{"cell_type":"code","source":["gr_gl = []\n","gr_r = []\n","gr_o = []\n","gr_dl = []\n","\n","for i in range(len(available)):\n","    gr_gl.append(fgl[i] * available[i])\n","    gr_r.append(fr[i]  * available[i])\n","    gr_o.append(fo[i]  * available[i])\n","    gr_dl.append(ggl * ddage[i])"],"metadata":{"id":"oF6RLDeNQQIx","executionInfo":{"status":"ok","timestamp":1673415012068,"user_tz":-540,"elapsed":5,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["wgl, wr, wo, maint"],"metadata":{"id":"tU-suayPQc-n"}},{"cell_type":"code","source":["wgl = []\n","wr = []\n","wo = []\n","maint = []\n","\n","for i in range(len(gr_gl)):\n","    wgls += (gr_gl[i] - gr_dl[i])\n","    wrs += (gr_r[i])\n","    wos += (gr_o[i])\n","    wgl.append(wgls)\n","    wr.append(wrs)\n","    wo.append(wos)"],"metadata":{"id":"MoIcpwhNQmWM","executionInfo":{"status":"ok","timestamp":1673415012069,"user_tz":-540,"elapsed":5,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["### **stage.py**"],"metadata":{"id":"t3LU3Xk_Qsov"}},{"cell_type":"markdown","source":["#### parameter"],"metadata":{"id":"LLiJMhgqQyCc"}},{"cell_type":"code","source":["Rxleaf  = 1.838\n","Txleaf  = 34.7\n","Toleaf  = 20.57\n","\n","# temp. function sum for veg. and rep. stage\n","# tempdvs = sumtemp/satVS or 1 + (sumtemp - satVS)/(satRS - satVS) or 2\n","satTemp   = 30       # requirement sum of temp_rate for flowering\n","satRep    = 150      # requirement sum of temp_rate for harvesting\n","optTemp   = 15.7       # max. temp for veg. and rep, growth, (temp_rate = np.exp(-1*(np.log(temp/optTemp)**2) )\n","\n","# ver. function sum for vernalization\n","# verdvs = sumver / satVer or 1\n","satVer    = 52       # sum of ver_rate for flowering\n","optVer    = 6.2      # opt. temp. for vernalization , (verrate = np.exp(-1*(np.log(temp/optVer)**4) )\n","\n","#timestep\n","time = 'hour'\n","conv = 1/24  if time == 'hour' else 1"],"metadata":{"id":"Hdif2nrwQwgU","executionInfo":{"status":"ok","timestamp":1673415012069,"user_tz":-540,"elapsed":5,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["dap = hour_result['dap'].tolist()\n","Ta = input_data['Tair'].tolist()"],"metadata":{"id":"XkEtYqf-Q6FD","executionInfo":{"status":"ok","timestamp":1673415012069,"user_tz":-540,"elapsed":5,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["#### midRateLN (중간 단계 엽수)"],"metadata":{"id":"SmQmolnGRM-x"}},{"cell_type":"code","source":["midRateLN = []\n","for i in Ta:\n","    if (i > 0.0) and (i < Txleaf):\n","        leafrate = Rxleaf *((Txleaf-i)/(Txleaf-Toleaf))*(i/Toleaf)**(Toleaf/(Txleaf-Toleaf))\n","        leafrate = leafrate * conv\n","        midRateLN.append(leafrate)\n","    else:\n","        leafrate = 0.0\n","        midRateLN.append(leafrate)"],"metadata":{"id":"8kWZlM8CQ8YM","executionInfo":{"status":"ok","timestamp":1673415012070,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":["#### earlyRateLN (초기 단계 엽수)"],"metadata":{"id":"pDAFFCOxRSy8"}},{"cell_type":"code","source":["earlyRateLN = []\n","for i in Ta:\n","    for x in midRateLN:\n","        earlyrateln = x * 0.05\n","        earlyRateLN.append(earlyrateln)"],"metadata":{"id":"wxDWKairRFDt","executionInfo":{"status":"ok","timestamp":1673415012480,"user_tz":-540,"elapsed":416,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["#### leafnumber"],"metadata":{"id":"MOWhxlMORa9_"}},{"cell_type":"code","source":["daysRoot = 10\n","pLeafForm = 0.69\n","inleafnumber = 6\n","\n","leafnumbers = []\n","LN = []\n","\n","for i in range(len(dap)):\n","    if dap[i] < daysRoot:\n","        leafrates = earlyRateLN[i]\n","        leafnumbers.append(leafrates)\n","    else:\n","        leafrates = midRateLN[i]*pLeafForm\n","        leafnumbers.append(leafrates)\n","\n","for i in range(len(leafnumbers)):\n","    inleafnumber +=leafnumbers[i]\n","    LN.append(inleafnumber)\n","\n","leafnumber = [int(x) for x in LN]"],"metadata":{"id":"2ypkqQCCRfR_","executionInfo":{"status":"ok","timestamp":1673415012480,"user_tz":-540,"elapsed":2,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["#### eachLenDist (엽 분포)"],"metadata":{"id":"fMTvaQZuRjCc"}},{"cell_type":"code","source":["eachLenDist = []\n","for x in range(len(leafnumber)):\n","    number = []\n","    if leafnumber[x] < 8:                    ## limit of leafnumber 8장 보다 작을 경우 오류 방지\n","        for i in range(leafnumber[x]):\n","            number.append(1.0)\n","    else:\n","        a = 20.347*np.log(leafnumber[x]) - 40.703\n","        b = 0.2086*(leafnumber[x]) + 1.6862\n","        for i in range(1,leafnumber[x]+1):\n","            eachLen = a * np.exp(-0.5 * ((i - b) / b)**2)\n","            number.append(eachLen)\n","    eachLenDist.append(number)"],"metadata":{"id":"msVvlaPhRhKI","executionInfo":{"status":"ok","timestamp":1673415012913,"user_tz":-540,"elapsed":435,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["#### eachLeafArea (엽 하나당 면적)"],"metadata":{"id":"OzfdDOXQRntj"}},{"cell_type":"code","source":["eachLeafArea = []\n","for i in range(len(eachLenDist)):\n","    eachleafarea = [0.3512*each**2 + 1.1328*each for each in eachLenDist[i]]\n","    eachLeafArea.append(eachleafarea)"],"metadata":{"id":"6O_focIoRp8F","executionInfo":{"status":"ok","timestamp":1673415012913,"user_tz":-540,"elapsed":3,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["#### eachBladeArea (blade당 면적)"],"metadata":{"id":"AV4vpzpLRrXd"}},{"cell_type":"code","source":["eachBladeArea = []\n","ratio = []\n","#\n","for i in range(len(eachLeafArea)):\n","    ratios = [0.9217*np.exp(-0.01*order) for order in range(1, len(eachLeafArea[i])+1)]\n","    ratio.append(ratios)\n","\n","\n","for x in range(len(ratio)):\n","    eachbladearea = [a*b for a, b in zip(ratio[x], eachLeafArea[x])]\n","    eachBladeArea.append(eachbladearea)"],"metadata":{"id":"t9X5iJg7RvPr","executionInfo":{"status":"ok","timestamp":1673415012913,"user_tz":-540,"elapsed":2,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["##### greenleaf 고려 X 전체 엽면적"],"metadata":{"id":"elmBmeOFRw0f"}},{"cell_type":"code","source":["LeafArea = []\n","for i in range(len(eachBladeArea)):\n","    leafarea = sum(eachBladeArea[i])\n","    LeafArea.append(leafarea)"],"metadata":{"id":"IoDTEf4GRzYC","executionInfo":{"status":"ok","timestamp":1673415012913,"user_tz":-540,"elapsed":2,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["##### greenleaf 고려 X 전체 LAI"],"metadata":{"id":"rg82D678R1rU"}},{"cell_type":"code","source":["Lai = []\n","\n","for i in range(len(LeafArea)):\n","    lai = LeafArea[i] * 3.8 / 10000\n","    Lai.append(lai)\n","\n","plt.plot(Lai)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":266},"id":"RSoA_aJSR3nn","executionInfo":{"status":"ok","timestamp":1673415013402,"user_tz":-540,"elapsed":491,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}},"outputId":"d955f12b-5d1c-4c12-c0a3-c7f134b504ce"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### Green Leaf Area Cal"],"metadata":{"id":"Shyu-Ow2R5rF"}},{"cell_type":"markdown","source":["##### green leaf 갯수"],"metadata":{"id":"NnLqZg8JSGuW"}},{"cell_type":"code","source":["numberGL = []\n","numberGreenLeaf = []\n","\n","for i in range(len(eachBladeArea)):\n","    numbergl = 0.9333*np.exp(-0.017*len(eachBladeArea[i]))*len(eachBladeArea[i])\n","    numberGL.append(numbergl)\n","    numbergreenleaf = int(numberGL[i])\n","    numberGreenLeaf.append(numbergreenleaf)"],"metadata":{"id":"3C1CcBcTSAyC","executionInfo":{"status":"ok","timestamp":1673415013402,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":["##### green leaf 하나당 엽면적"],"metadata":{"id":"yNfwMNCLSLGw"}},{"cell_type":"code","source":["greenBladeArea = []\n","\n","for i in range(len(eachBladeArea)):\n","    greenbladearea = eachBladeArea[i][:numberGreenLeaf[i]]\n","    greenBladeArea.append(greenbladearea)"],"metadata":{"id":"eVQUSNMVSSSp","executionInfo":{"status":"ok","timestamp":1673415013402,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":["##### green leaf 총 엽면적"],"metadata":{"id":"VALB26g8SUDE"}},{"cell_type":"code","source":["greenLeafArea = []\n","for i in range(len(greenBladeArea)):\n","    gleafarea = sum(greenBladeArea[i])\n","    greenLeafArea.append(gleafarea)"],"metadata":{"id":"uOf-xEmFSWog","executionInfo":{"status":"ok","timestamp":1673415013402,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":["##### green leaf LAI"],"metadata":{"id":"I19KfosrSZKF"}},{"cell_type":"code","source":["gLai = []\n","\n","for i in range(len(greenLeafArea)):\n","    glai = greenLeafArea[i] * 3.8 / 10000\n","    gLai.append(glai)\n","\n","plt.plot(gLai)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"dm0VtTRuSb65","executionInfo":{"status":"ok","timestamp":1673415013402,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}},"outputId":"ee69dc2b-4095-4ddf-c46f-cb59a2fe1b44"},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### DVS"],"metadata":{"id":"NwRXYyq8SevZ"}},{"cell_type":"markdown","source":["##### calVerdvs"],"metadata":{"id":"h1AGylmfShp-"}},{"cell_type":"code","source":["tair = []\n","rate = []\n","sumVer = []\n","verdvs = []\n","\n","for i in range(len(Ta)):\n","    ta = max(Ta[i], 0.01)\n","    tair.append(ta)\n","\n","for i in range(len(tair)):\n","    rates = np.exp(-1*(np.log(tair[i]/optVer)**4))\n","    rate.append(rates)\n","\n","for i in range(len(rate)):\n","    sumver = rate[i] * conv\n","    sumVer.append(sumver)\n","\n","for i in range(len(sumVer)):\n","    verdvss = max(1, sumVer[i]/satVer)\n","    verdvs.append(verdvss)"],"metadata":{"id":"WwChBTaYSgPZ","executionInfo":{"status":"ok","timestamp":1673415013403,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["##### calcTempdvs"],"metadata":{"id":"i0qMb4OUSs1B"}},{"cell_type":"code","source":["rateT = []\n","sumtemp = 0\n","sumTemp = []\n","tempdvs = []\n","\n","\n","for i in range(len(tair)):\n","    ratet = np.exp(-1*(np.log(tair[i]/optTemp)**2))\n","    rateT.append(ratet)\n","\n","for i in range(len(rateT)):\n","    sumtemp += rateT[i] * conv\n","    sumTemp.append(sumtemp)\n","\n","    if sumTemp[i] >= satRep:\n","        tempdvss = 2.0\n","        tempdvs.append(tempdvss)\n","    elif sumTemp[i] > satTemp:\n","        tempdvss = 1 + (sumTemp[i] - satTemp) /(satRep - satTemp)\n","        tempdvs.append(tempdvss)\n","    else:\n","        tempdvss = sumTemp[i] / satTemp\n","        tempdvs.append(tempdvss)"],"metadata":{"id":"BH3P19mySwiX","executionInfo":{"status":"ok","timestamp":1673415013403,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["##### dvs"],"metadata":{"id":"PivgMFVzS0YG"}},{"cell_type":"code","source":["DVS = []\n","\n","for i in range(len(verdvs)):\n","    dvs = verdvs[i] * tempdvs[i]\n","    DVS.append(dvs)"],"metadata":{"id":"SqYOC-eNSz1I","executionInfo":{"status":"ok","timestamp":1673415013403,"user_tz":-540,"elapsed":6,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":["### **fraction.py**"],"metadata":{"id":"5zp49rv-S-D3"}},{"cell_type":"markdown","source":["#### parameter"],"metadata":{"id":"e1tKR3RmTCpR"}},{"cell_type":"code","source":["##### Constants\n","KELVIN   = 273.15       # Kelvin temperature\n","R        = 8.314        # ideal gas constant\n","SBC      = 5.6697e-8    # Stefan-Boltzmann constant   W m-2 K-4\n","PSC      = 6.66e-4      # psychrometer constant\n","Cp       = 29.3         # specific heat of air    J mol-1 C-1\n","LAMBDA   = 44000.       # Latent heat of vaporization at 25 C J mol-1import numpy as np\n","\n","### Constant or parameters\n","SC      = 1361.     # Solar conatant   W m-2\n","conv    = 4.57      # conversion from W m-2 to umol m-2 s-1\n","Po      = 101.3     # atomopheric pressure at sea level  kPa\n","\n","### Parameters of Chinese cabbage\n","Nb      = 25         # residual leaf N content (about 0.5% N) mmol m-2  from de Pury(1997)\n","No      = 137        # leaf N content of canopy top         mmol m-2\n","Nl      = 120        # leaf N content per unit leaf area    mmol m-2\n","kn      = 0.713      # coefficient for leaf N allocation\n","# Vcmax = 110        # rubisco capacity by calculation      umol m-2 s-1 from de Pury(1997)\n","# Xn = Vcmax/(Nl-Nb) # ratio of rubisco capacity to leaf N\n","\n","### clumping factor\n","clump   = 0.5"],"metadata":{"id":"I0dpBz18TF8i","executionInfo":{"status":"ok","timestamp":1673415013403,"user_tz":-540,"elapsed":5,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["doy = hour_result['doy'].tolist()\n","hour = hour_result['hour'].tolist()\n","lai = hour_result['lai'].tolist()\n","PPFD = input_data['Irrad'].tolist()\n","PPFD = [x * 4.57 / 2 for x in PPFD]\n","timestamp = input_data['timestamp'].tolist()"],"metadata":{"id":"oV5FagvBTIv7","executionInfo":{"status":"ok","timestamp":1673415014257,"user_tz":-540,"elapsed":859,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["a       = 0.72    # atmospheric transmission coefficients of PAR\n","fa      = 0.426   # forward scattering coeff of PAR\n","rhocd   = 0.036   # canopy reflection coeff for diffuse PAR\n","rhoh    = 0.04    # reflection coeff of a canopy with horizontal leaves\n","rhol    = 0.10    # reflection coeff for PAR\n","taul    = 0.05    # leaf transmissivity to PAR\n","sigma   = 0.15    # leaf scattering coeff for PAR (rhol + taul)\n","kd      = 0.78 * clump   # diffuse PAR extinction coeff.             0.5 <- clumping\n","kdprime = 0.719   # diffuse & scattered diffuse OAR ext coeff\n","\n","lat = np.radians(37.0)\n","P = 100.0"],"metadata":{"id":"PU-mow27TJ77","executionInfo":{"status":"ok","timestamp":1673415014257,"user_tz":-540,"elapsed":4,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":["#### sunlit, shaded"],"metadata":{"id":"nWpJ7_mgTNKI"}},{"cell_type":"code","source":["decl = []\n","ha = []\n","sin_a = []\n","cos_b = []\n","incl = []\n","sunhgt = []\n","kb = []\n","kbprime = []\n","rhocb = []\n","m = []\n","fd = []\n","\n","for i in range(len(doy)):\n","    decl.append(-0.4093 * np.cos(2 * np.pi * (doy[i] + 10) / 365))  # sun declination   rad\n","    ha.append(np.pi / 12 * (hour[i] - 12))                          # hour angle   rad\n","    sin_a.append(np.sin(decl[i])*np.sin(lat))\n","    cos_b.append(np.cos(decl[i])*np.cos(lat))\n","    incl.append(np.arccos(sin_a[i] + cos_b[i] * np.cos(ha[i])))     # sun inclination   rad\n","    sunhgt.append(max(0.05, np.pi / 2 - incl[i]))                   # solar height   rad\n","    kb.append(0.5/np.sin(sunhgt[i]) * clump)                        # beam radiation extinction coeff  0.5 <- clumping\n","    kbprime.append(0.46/np.sin(sunhgt[i]))                          # beam + scattered beam PAR ext coeff\n","    rhocb.append(1-np.exp(-2*rhoh*kb[i]/(1+kb[i])))                 # canopy reflec coeff for beam PAR\n","    m.append(P / Po /np.sin(sunhgt[i]))                             # optical air mass\n","    fd.append((1-a**m[i])/(1+a**m[i] * (1/fa-1)) )"],"metadata":{"id":"-0qJufxRTP5W","executionInfo":{"status":"ok","timestamp":1673415014257,"user_tz":-540,"elapsed":4,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":50,"outputs":[]},{"cell_type":"markdown","source":["#### Icsun, Icshade"],"metadata":{"id":"ybmBaYp3TWEv"}},{"cell_type":"code","source":["It = PPFD\n","Id = []\n","Ib = []\n","Icbs = []\n","Icd = []\n","Icdb = []\n","Icdf = []\n","Icsc = []\n","Icshdf = []\n","\n","Icsun = []\n","Icshsc = []\n","\n","\n","for i in range(len(PPFD)):\n","    Id.append(It[i] * fd[i])                       # diffuse fraction of irradiance PAR umol m-2 s-1\n","    Ib.append(It[i] - Id[i])                       # beam fraction of irradiance PAR umol m-2 s-1\n","\n","    ## for total leaves\n","    Icbs.append(Ib[i]*(1-rhocb[i])*(1-np.exp(-kbprime[i]*lai[i])))       # canopy absorbed beam irrad.\n","    Icd.append(Id[i]*(1-rhocd)*(1-np.exp(-kdprime*lai[i])))        # canopy absorbed diffuse irrad.\n","\n","    ## for sunlit leaves\n","    Icdb.append(Ib[i]*(1-sigma)*(1-np.exp(-kb[i]*lai[i])))       # absorbed direct beam by sunlit leaves\n","    Icdf.append(Id[i]*(1-rhocd)*(1-np.exp(-(kdprime+kb[i])*lai[i])) * \\\n","        kdprime/(kdprime+kb[i]))                                # absorbed diffse beam by sunlit leaves\n","    Icsc.append(Ib[i]*((1-rhocb[i])*(1-np.exp(-(kbprime[i]+kb[i])*lai[i]))*kbprime[i]/(kbprime[i]+kb[i])- \\\n","        (1-sigma)*(1-np.exp(-2*kb[i]*lai[i]))/2))             # absorbed scattered beam by sunlit leaves\n","    Icsun.append(Icdb[i] + Icdf[i] + Icsc[i])\n","\n","    ## for shaded leaves\n","    Icshdf.append(Id[i]*(1-rhocd)*(1-np.exp(-kdprime*lai[i])-(1-np.exp(-(kdprime+kb[i])*lai[i]))* \\\n","    kdprime/(kdprime+kb[i])))                              # absorbed diffuse beam by shaded leaves\n","\n","    Icshsc.append(Ib[i]*((1-rhocb[i])*(1-np.exp(-kbprime[i]*lai[i])-(1-np.exp(-(kbprime[i]+kb[i])*lai[i]))* \\\n","    kbprime[i]/(kbprime[i]+kb[i]))-(1-sigma)*(1-np.exp(-kb[i]*lai[i])-(1-np.exp(-2*kb[i]*lai[i]))/2)))"],"metadata":{"id":"4Y9I9i0gTVXI","executionInfo":{"status":"ok","timestamp":1673415014257,"user_tz":-540,"elapsed":4,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}}},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":["#### LAIsun, LAIshaded"],"metadata":{"id":"hUBZV2h3Taou"}},{"cell_type":"code","source":["laiSun = []\n","laiSh = []\n","\n","for i in range(len(lai)):\n","    laiSun.append((1 - np.exp(-kb[i] * lai[i])) / kb[i])\n","    laiSh.append(lai[i] - laiSun[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"uVUW-GyNTkoZ","executionInfo":{"status":"ok","timestamp":1673415514828,"user_tz":-540,"elapsed":1055,"user":{"displayName":"Seungwon Seok","userId":"05628088181356560629"}},"outputId":"0d5adf4a-ff65-428f-f84f-84af46c51df6"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}